title:
  es: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'
  en: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'
  pt-br: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'

lead:
  es: 'CÃ³mo implementar un sitio multilenguaje en Hugo usando un solo Ã¡rbol de contenido y data files'
  en: 'How to implement a multilingual Hugo site using a single content tree and data files'
  pt-br: 'Como implementar um site multilÃ­ngue em Hugo usando uma Ãºnica Ã¡rvore de conteÃºdo e data files'

content:
  en: |
    After changing the site to HUGO last year and getting a better understanding of this
    technology/framework, I wanted to solve some issues and see if it's possible to
    serve multilingual content in a simplified way, that is, **from a single
    file tree**, without multiplying content branches.

    ## The Conventional Way

    By default, HUGO proposes creating a content tree for each language. This
    means creating a similar structure for each one:

    ```
    content/
    â”œâ”€â”€ es/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â”œâ”€â”€ en/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â””â”€â”€ pt-br/
        â”œâ”€â”€ posts/
        â””â”€â”€ series/
    ```
    In cases where content is very different between languages, this approach is
    appropriate. That's not my case.

    The biggest penalty comes from **maintaining 3 versions** of each file.

    ## The Series

    Another thing I wanted to do is create simple article series, something that helps
    maintain coherent navigation and information flow between a set of articles
    related to a topic. This post itself is part of a series, and I'll talk about this
    in another article later on.

    ## Data Files + Smart Templates

    To solve the multilingual content, I finally implemented a hybrid system
    that uses **YAML data files** for multilingual content and **Hugo
    templates** that automatically select the correct language.

    ### Final Structure

    ```
    content/
    â””â”€â”€ 20250810_my_post.md          # Only metadata

    data/
    â””â”€â”€ 20250810_my_post.yaml        # Content in 3 languages

    layouts/
    â”œâ”€â”€ _default/
    â”‚   â”œâ”€â”€ single.html              # Renders from data files
    â”‚   â””â”€â”€ summary.html             # Multilingual excerpts
    â””â”€â”€ partials/
        â””â”€â”€ content-renderer.html    # Language selection logic
    ```

    ### Content File (.md)

    The `.md` file only contains metadata and a reference:

    ```markdown
    ---
    title: 'Moxon Antenna for 6m'
    date: 2025-08-10
    categories: ["Radio"]
    tags: ["Antenna", "VHF"]
    ---

    This post uses data files to show different content based on user language.
    ```

    ### Data File (.yaml)

    All the actual content is in the YAML file:

    ```yaml
    title:
      es: 'Antena Moxon para 6 metros'
      en: 'Moxon Antenna for 6 meters'
      pt: 'Antena Moxon para 6 metros'

    content:
      es: |
        La Moxon es una direccional simple de dos elementos...
        
      en: |
        The Moxon is a simple two-element directional antenna...
        
      pt: |
        A Moxon Ã© uma antena direcional simples de dois elementos...
    ```

    **I'm not convinced about this structure.** Right off the bat, I think it's not necessary,
    and I'm not sure if it's convenient, to use the file in /data for translated content,
    I'll probably go back to having all language content in the .md file.

    ### Rendering Template

    The template automatically detects the language and renders the appropriate content:

    ```go-html-template
    {{ $currentLang := .Language.Lang }}
    {{ $contentKey := .File.BaseFileName }}
    {{ $dataFile := index .Site.Data $contentKey }}

    {{ if $dataFile }}
      {{ $title := index $dataFile.title $currentLang }}
      {{ $content := index $dataFile.content $currentLang }}
      
      <h1>{{ $title }}</h1>
      <div class="content">
        {{ $content | markdownify }}
      </div>
    {{ end }}
    ```

    ## System Benefits

    ### âœ… **Simplified Maintenance**
    - **Single file** per post (the .yaml)
    - **Single URL** serving 3 languages
    - **No duplication** of directory structure

    ### âœ… **SEO Optimized**
    - Clean URLs: `/es/post/`, `/en/post/`, `/pt-br/post/`
    - **Automatic hreflang** between versions
    - **Unique content** per language (not duplicated)

    ### âœ… **User Experience**
    - **Instant language switching** (same URL)
    - **Navigation consistency**
    - **Smart fallback** if translation is missing

    ### âœ… **Efficient Workflow**
    - Write in Spanish
    - System automatically translates to EN/PT-BR
    - **Single publication** for all 3 languages

    ## Technical Implementation

    The heart of the system is in the template logic that:

    1. **Detects current language** (`{{ .Language.Lang }}`)
    2. **Looks up corresponding** data file
    3. **Extracts content** in appropriate language
    4. **Renders with fallback** if translation is missing

    ```go-html-template
    {{/* Look for content in current language */}}
    {{ $content := index $dataFile.content $currentLang }}

    {{/* Fallback to Spanish if translation doesn't exist */}}
    {{ if not $content }}
      {{ $content = index $dataFile.content "es" }}
    {{ end }}

    {{ $content | markdownify }}
    ```

    ## Results

    The site now **automatically** serves content in Spanish,
    English and Portuguese from a single codebase. Readers can
    access articles in their preferred language, but I only have to maintain
    one set of files.

    ## git hooks

    Since the main advantage of this is that publishing a post is very streamlined
    (new file, write, git add, git commit, git push), doing translations
    is definitely an additional and significant friction point. That's why I'm going to implement a
    script that uses some AI API to do the translations, we'll see how that goes.

    **Site URLs:**
    - ðŸ‡¦ðŸ‡· [lu2dfm.github.io/es/](https://lu2dfm.github.io/es/)
    - ðŸ‡§ðŸ‡· [lu2dfm.github.io/pt-br/](https://lu2dfm.github.io/pt-br/)
    - ðŸ‡ºðŸ‡¸ [lu2dfm.github.io/en/](https://lu2dfm.github.io/en/)

    The system works transparently for the end user, but greatly simplifies
    maintenance work.

  pt-br: |
    Depois de mudar o site para HUGO no ano passado e entender melhor esta
    tecnologia/framework, quis resolver alguns problemas e ver se Ã© possÃ­vel
    servir conteÃºdo multilÃ­ngue de forma simplificada, ou seja, **a partir de uma Ãºnica
    Ã¡rvore de arquivos**, sem multiplicar os ramos de conteÃºdo.

    ## A Forma Convencional

    Por padrÃ£o, o HUGO propÃµe fazer uma Ã¡rvore de conteÃºdo para cada idioma. Isso
    implica criar uma estrutura similar para cada um:

    ```
    content/
    â”œâ”€â”€ es/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â”œâ”€â”€ en/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â””â”€â”€ pt-br/
        â”œâ”€â”€ posts/
        â””â”€â”€ series/
    ```
    Nos casos em que o conteÃºdo Ã© muito diferente entre idiomas, essa abordagem Ã©
    adequada. NÃ£o Ã© o meu caso.

    A maior penalidade vem de **manter 3 versÃµes** de cada arquivo.

    ## As SÃ©ries

    Outra coisa que eu queria fazer Ã© criar sÃ©ries simples de artigos, algo que ajude
    a manter uma navegaÃ§Ã£o e fluxo de informaÃ§Ã£o coerente entre um conjunto de artigos
    relacionados a um tema. Este post faz parte de uma sÃ©rie, e vou falar sobre isso
    em outro artigo mais adiante.

    ## Data Files + Templates Inteligentes

    Para resolver o conteÃºdo multilÃ­ngue, finalmente implementei um sistema
    hÃ­brido que usa **arquivos de dados YAML** para conteÃºdo multilÃ­ngue e **templates
    Hugo** que selecionam automaticamente o idioma correto.

    ### Estrutura Final

    ```
    content/
    â””â”€â”€ 20250810_meu_post.md         # Apenas metadados

    data/
    â””â”€â”€ 20250810_meu_post.yaml       # ConteÃºdo em 3 idiomas

    layouts/
    â”œâ”€â”€ _default/
    â”‚   â”œâ”€â”€ single.html              # Renderiza a partir de data files
    â”‚   â””â”€â”€ summary.html             # Trechos multilÃ­ngues
    â””â”€â”€ partials/
        â””â”€â”€ content-renderer.html    # LÃ³gica de seleÃ§Ã£o de idioma
    ```

    ### Arquivo de ConteÃºdo (.md)

    O arquivo `.md` contÃ©m apenas metadados e uma referÃªncia:

    ```markdown
    ---
    title: 'Antena Moxon para 6m'
    date: 2025-08-10
    categories: ["Radio"]
    tags: ["Antena", "VHF"]
    ---

    Este post usa data files para mostrar conteÃºdo diferente de acordo com o idioma do usuÃ¡rio.
    ```

    ### Data File (.yaml)

    Todo o conteÃºdo real estÃ¡ no arquivo YAML:

    ```yaml
    title:
      es: 'Antena Moxon para 6 metros'
      en: 'Moxon Antenna for 6 meters'
      pt: 'Antena Moxon para 6 metros'

    content:
      es: |
        La Moxon es una direccional simple de dos elementos...
        
      en: |
        The Moxon is a simple two-element directional antenna...
        
      pt: |
        A Moxon Ã© uma antena direcional simples de dois elementos...
    ```

    **NÃ£o estou convencido desta estrutura.** Logo de cara, penso que nÃ£o Ã© necessÃ¡rio,
    e nÃ£o sei se Ã© conveniente, usar o arquivo em /data para o conteÃºdo traduzido,
    provavelmente voltarei a ter todo o conteÃºdo em todos os idiomas no arquivo .md.

    ### Template de RenderizaÃ§Ã£o

    O template detecta automaticamente o idioma e renderiza o conteÃºdo apropriado:

    ```go-html-template
    {{ $currentLang := .Language.Lang }}
    {{ $contentKey := .File.BaseFileName }}
    {{ $dataFile := index .Site.Data $contentKey }}

    {{ if $dataFile }}
      {{ $title := index $dataFile.title $currentLang }}
      {{ $content := index $dataFile.content $currentLang }}
      
      <h1>{{ $title }}</h1>
      <div class="content">
        {{ $content | markdownify }}
      </div>
    {{ end }}
    ```

    ## BenefÃ­cios do Sistema

    ### âœ… **ManutenÃ§Ã£o Simplificada**
    - **Um Ãºnico arquivo** por post (o .yaml)
    - **Uma Ãºnica URL** servindo 3 idiomas
    - **Sem duplicaÃ§Ã£o** de estrutura de diretÃ³rios

    ### âœ… **SEO Otimizado**
    - URLs limpas: `/es/post/`, `/en/post/`, `/pt-br/post/`
    - **Hreflang automÃ¡tico** entre versÃµes
    - **ConteÃºdo Ãºnico** por idioma (nÃ£o duplicado)

    ### âœ… **ExperiÃªncia do UsuÃ¡rio**
    - **Troca instantÃ¢nea de idioma** (mesma URL)
    - **ConsistÃªncia** na navegaÃ§Ã£o
    - **Fallback inteligente** se faltar traduÃ§Ã£o

    ### âœ… **Fluxo de Trabalho Eficiente**
    - Escrevo em espanhol
    - Sistema traduz automaticamente para EN/PT-BR
    - **Uma Ãºnica publicaÃ§Ã£o** para os 3 idiomas

    ## ImplementaÃ§Ã£o TÃ©cnica

    O coraÃ§Ã£o do sistema estÃ¡ na lÃ³gica de templates que:

    1. **Detecta o idioma** atual (`{{ .Language.Lang }}`)
    2. **Busca o data file** correspondente
    3. **Extrai conteÃºdo** no idioma apropriado
    4. **Renderiza com fallback** se faltar traduÃ§Ã£o

    ```go-html-template
    {{/* Buscar conteÃºdo no idioma atual */}}
    {{ $content := index $dataFile.content $currentLang }}

    {{/* Fallback para espanhol se nÃ£o existir traduÃ§Ã£o */}}
    {{ if not $content }}
      {{ $content = index $dataFile.content "es" }}
    {{ end }}

    {{ $content | markdownify }}
    ```

    ## Resultados

    O site agora serve **automaticamente** conteÃºdo em espanhol,
    inglÃªs e portuguÃªs a partir de uma Ãºnica base de cÃ³digo. Os leitores podem
    acessar os artigos em seu idioma preferido, mas eu sÃ³ preciso manter
    um conjunto de arquivos.

    ## git hooks

    Como a principal vantagem disso Ã© que publicar um post Ã© muito simplificado
    (novo arquivo, escrever, git add, git commit, git push), fazer as traduÃ§Ãµes
    Ã© definitivamente um ponto de fricÃ§Ã£o adicional e significativo. Por isso vou implementar um
    script que use a API de alguma IA para fazer as traduÃ§Ãµes, veremos como isso funciona.

    **URLs do site:**
    - ðŸ‡¦ðŸ‡· [lu2dfm.github.io/es/](https://lu2dfm.github.io/es/)
    - ðŸ‡§ðŸ‡· [lu2dfm.github.io/pt-br/](https://lu2dfm.github.io/pt-br/)
    - ðŸ‡ºðŸ‡¸ [lu2dfm.github.io/en/](https://lu2dfm.github.io/en/)

    O sistema funciona de forma transparente para o usuÃ¡rio final, mas simplifica enormemente
    o trabalho de manutenÃ§Ã£o.

  es: |
    DespuÃ©s de cambiar el site a HUGO el aÃ±o pasado y entender un poco mejor esta
    tecnologÃ­a/framework, quise resolver algunos problemas y de paso ver si es posible
    servir contenido multilingÃ¼e en una forma simplificada, o sea  **desde un solo
    Ã¡rbol de archivos**, sin multiplicar las ramas de contenido.

    ## La forma convencional

    Por default HUGO propone hacer un Ã¡rbol de contenido para cada idioma. Esto
    implica crear una estructura similar para cada uno:

    ```
    content/
    â”œâ”€â”€ es/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â”œâ”€â”€ en/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â””â”€â”€ pt-br/
        â”œâ”€â”€ posts/
        â””â”€â”€ series/
    ```
    En el caso de que el contenido es muy distinto entre idiomas este approach es
    adecuado. No es mi caso.

    La mayor penalidad la impone  **mantener 3 versiones** de cada archivo.

    ## Las series

    Otra cosa que querÃ­a hacer es crear series simples de artÃ­culos, algo que ayude
    a mantener una navegaciÃ³n y flujo informativo coherente entre un conjunto de artÃ­culos
    relacionados a un tema. Este mismo post es parte de una serie, y de esto voy a hablar
    en otro artÃ­culo mas adelante.

    ## Data Files + Templates Inteligentes

    Para resolver el contenido multilenguaje finalmente implementÃ© un sistema
    hÃ­brido que usa **data files YAML** para el contenido multiidioma y **templates
    Hugo** que seleccionan automÃ¡ticamente el idioma correcto.

    ### Estructura Final

    ```
    content/
    â””â”€â”€ 20250810_mi_post.md          # Solo metadatos

    data/
    â””â”€â”€ 20250810_mi_post.yaml        # Contenido en 3 idiomas

    layouts/
    â”œâ”€â”€ _default/
    â”‚   â”œâ”€â”€ single.html              # Renderiza desde data files
    â”‚   â””â”€â”€ summary.html             # Extractos multiidioma
    â””â”€â”€ partials/
        â””â”€â”€ content-renderer.html    # LÃ³gica de selecciÃ³n de idioma
    ```

    ### Archivo de Contenido (.md)

    El archivo `.md` solo contiene metadatos y una referencia:

    ```markdown
    ---
    title: 'Antena Moxon para 6m'
    date: 2025-08-10
    categories: ["Radio"]
    tags: ["Antena", "VHF"]
    ---

    Este post usa data files para mostrar contenido diferente segÃºn el idioma del usuario.
    ```

    ### Data File (.yaml)

    Todo el contenido real estÃ¡ en el archivo YAML:

    ```yaml
    title:
      es: 'Antena Moxon para 6 metros'
      en: 'Moxon Antenna for 6 meters'
      pt: 'Antena Moxon para 6 metros'

    content:
      es: |
        La Moxon es una direccional simple de dos elementos...
        
      en: |
        The Moxon is a simple two-element directional antenna...
        
      pt: |
        A Moxon Ã© uma antena direcional simples de dois elementos...
    ```


    **No estoy convencido de esta estructura.** De movida pienso que no es necesario,
    y no se si es conveniente, usar el archivo en /data para el contenido traducido,
    es probable que retorne a tener el contenido en todos los idiomas pero en el .md.


    ### Template de Renderizado

    El template detecta automÃ¡ticamente el idioma y renderiza el contenido apropiado:

    ```go-html-template
    {{ $currentLang := .Language.Lang }}
    {{ $contentKey := .File.BaseFileName }}
    {{ $dataFile := index .Site.Data $contentKey }}

    {{ if $dataFile }}
      {{ $title := index $dataFile.title $currentLang }}
      {{ $content := index $dataFile.content $currentLang }}
      
      <h1>{{ $title }}</h1>
      <div class="content">
        {{ $content | markdownify }}
      </div>
    {{ end }}
    ```

    ## Beneficios del Sistema

    ### âœ… **Mantenimiento Simplificado**
    - **Un solo archivo** por post (el .yaml)
    - **Una sola URL** que sirve 3 idiomas
    - **Sin duplicaciÃ³n** de estructura de directorios

    ### âœ… **SEO Optimizado**
    - URLs limpias: `/es/post/`, `/en/post/`, `/pt-br/post/`
    - **Hreflang automÃ¡tico** entre versiones
    - **Contenido Ãºnico** por idioma (no duplicado)

    ### âœ… **Experiencia de Usuario**
    - **Cambio de idioma instantÃ¡neo** (misma URL)
    - **Consistencia** en navegaciÃ³n
    - **Fallback inteligente** si falta traducciÃ³n

    ### âœ… **Flujo de Trabajo Eficiente**
    - Escribo en castellano
    - Sistema traduce automÃ¡ticamente a EN/PT-BR
    - **Una sola publicaciÃ³n** para los 3 idiomas

    ## ImplementaciÃ³n TÃ©cnica

    El corazÃ³n del sistema estÃ¡ en la lÃ³gica de templates que:

    1. **Detecta el idioma** actual (`{{ .Language.Lang }}`)
    2. **Busca el data file** correspondiente
    3. **Extrae contenido** en el idioma apropiado
    4. **Renderiza con fallback** si falta traducciÃ³n

    ```go-html-template
    {{/* Buscar contenido en idioma actual */}}
    {{ $content := index $dataFile.content $currentLang }}

    {{/* Fallback a castellano si no existe traducciÃ³n */}}
    {{ if not $content }}
      {{ $content = index $dataFile.content "es" }}
    {{ end }}

    {{ $content | markdownify }}
    ```

    ## Resultados

    El sitio ahora sirve **automÃ¡ticamente** contenido en castellano, 
    inglÃ©s y portuguÃ©s desde una sola base de cÃ³digo. Los lectores pueden 
    acceder a los artÃ­culos en su idioma preferido, pero yo tengo que mantener
    un conjunto de archivos.

    ## git hooks

    Como la ventaja principal de esto es que publicar un post es muy aerodinÃ¡mico
    (nuevo archivo, escribir, git add, git commit, git push) hacer las traducciones
    es de todos una fricciÃ³n adicional e importante. Por eso voy a implementar un
    script que use la API de alguna IA para hacer las traducciones, ya veremos.

    **URLs del sitio:**
    - ðŸ‡¦ðŸ‡· [lu2dfm.github.io/es/](https://lu2dfm.github.io/es/)
    - ðŸ‡§ðŸ‡· [lu2dfm.github.io/pt-br/](https://lu2dfm.github.io/pt-br/)
    - ðŸ‡ºðŸ‡¸ [lu2dfm.github.io/en/](https://lu2dfm.github.io/en/) 

    El sistema funciona transparentemente para el usuario final, pero simplifica
    enormemente el trabajo de mantenimiento.


