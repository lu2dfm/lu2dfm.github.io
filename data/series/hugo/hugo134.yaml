title:
  es: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'
  en: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'
  pt-br: 'Sitio multilenguaje: un solo Ã¡rbol de contenido'

lead:
  es: 'ActualizaciÃ³n y cambio de estructura'
  en: 'ActualizaciÃ³n y cambio de estructura'
  pt-br: 'ActualizaciÃ³n y cambio de estructura'

content:
  en: 
  pt-br: 
  es: |
    DespuÃ©s de cambiar el site a HUGO el aÃ±o pasado y entender un poco mejor esta
    tecnologÃ­a/framework, quise resolver algunos problemas y de paso ver si es posible
    servir contenido multilingÃ¼e en una forma simplificada, o sea  **desde un solo
    Ã¡rbol de archivos**, sin multiplicar las ramas de contenido.

    ## La forma convencional

    Por default HUGO propone hacer un Ã¡rbol de contenido para cada idioma. Esto
    implica crear una estructura similar para cada uno:

    ```
    content/
    â”œâ”€â”€ es/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â”œâ”€â”€ en/
    â”‚   â”œâ”€â”€ posts/
    â”‚   â””â”€â”€ series/
    â””â”€â”€ pt-br/
        â”œâ”€â”€ posts/
        â””â”€â”€ series/
    ```
    En el caso de que el contenido es muy distinto entre idiomas este approach es
    adecuado. No es mi caso.

    La mayor penalidad la impone  **mantener 3 versiones** de cada archivo.

    ## Las series

    Otra cosa que querÃ­a hacer es crear series simples de artÃ­culos, algo que ayude
    a mantener una navegaciÃ³n y flujo informativo coherente entre un conjunto de artÃ­culos
    relacionados a un tema. Este mismo post es parte de una serie, y de esto voy a hablar
    en otro artÃ­culo mas adelante.

    ## Data Files + Templates Inteligentes

    Para resolver el contenido multilenguaje finalmente implementÃ© un sistema
    hÃ­brido que usa **data files YAML** para el contenido multiidioma y **templates
    Hugo** que seleccionan automÃ¡ticamente el idioma correcto.

    ### Estructura Final

    ```
    content/
    â””â”€â”€ 20250810_mi_post.md          # Solo metadatos

    data/
    â””â”€â”€ 20250810_mi_post.yaml        # Contenido en 3 idiomas

    layouts/
    â”œâ”€â”€ _default/
    â”‚   â”œâ”€â”€ single.html              # Renderiza desde data files
    â”‚   â””â”€â”€ summary.html             # Extractos multiidioma
    â””â”€â”€ partials/
        â””â”€â”€ content-renderer.html    # LÃ³gica de selecciÃ³n de idioma
    ```

    ### Archivo de Contenido (.md)

    El archivo `.md` solo contiene metadatos y una referencia:

    ```markdown
    ---
    title: 'Antena Moxon para 6m'
    date: 2025-08-10
    categories: ["Radio"]
    tags: ["Antena", "VHF"]
    ---

    Este post usa data files para mostrar contenido diferente segÃºn el idioma del usuario.
    ```

    ### Data File (.yaml)

    Todo el contenido real estÃ¡ en el archivo YAML:

    ```yaml
    title:
      es: 'Antena Moxon para 6 metros'
      en: 'Moxon Antenna for 6 meters'
      pt: 'Antena Moxon para 6 metros'

    content:
      es: |
        La Moxon es una direccional simple de dos elementos...
        
      en: |
        The Moxon is a simple two-element directional antenna...
        
      pt: |
        A Moxon Ã© uma antena direcional simples de dois elementos...
    ```


    **No estoy convencido de esta estructura.** De movida pienso que no es necesario,
    y no se si es conveniente, usar el archivo en /data para el contenido traducido,
    es probable que retorne a tener el contenido en todos los idiomas pero en el .md.


    ### Template de Renderizado

    El template detecta automÃ¡ticamente el idioma y renderiza el contenido apropiado:

    ```go-html-template
    {{ $currentLang := .Language.Lang }}
    {{ $contentKey := .File.BaseFileName }}
    {{ $dataFile := index .Site.Data $contentKey }}

    {{ if $dataFile }}
      {{ $title := index $dataFile.title $currentLang }}
      {{ $content := index $dataFile.content $currentLang }}
      
      <h1>{{ $title }}</h1>
      <div class="content">
        {{ $content | markdownify }}
      </div>
    {{ end }}
    ```

    ## Beneficios del Sistema

    ### âœ… **Mantenimiento Simplificado**
    - **Un solo archivo** por post (el .yaml)
    - **Una sola URL** que sirve 3 idiomas
    - **Sin duplicaciÃ³n** de estructura de directorios

    ### âœ… **SEO Optimizado**
    - URLs limpias: `/es/post/`, `/en/post/`, `/pt-br/post/`
    - **Hreflang automÃ¡tico** entre versiones
    - **Contenido Ãºnico** por idioma (no duplicado)

    ### âœ… **Experiencia de Usuario**
    - **Cambio de idioma instantÃ¡neo** (misma URL)
    - **Consistencia** en navegaciÃ³n
    - **Fallback inteligente** si falta traducciÃ³n

    ### âœ… **Flujo de Trabajo Eficiente**
    - Escribo en castellano
    - Sistema traduce automÃ¡ticamente a EN/PT-BR
    - **Una sola publicaciÃ³n** para los 3 idiomas

    ## ImplementaciÃ³n TÃ©cnica

    El corazÃ³n del sistema estÃ¡ en la lÃ³gica de templates que:

    1. **Detecta el idioma** actual (`{{ .Language.Lang }}`)
    2. **Busca el data file** correspondiente
    3. **Extrae contenido** en el idioma apropiado
    4. **Renderiza con fallback** si falta traducciÃ³n

    ```go-html-template
    {{/* Buscar contenido en idioma actual */}}
    {{ $content := index $dataFile.content $currentLang }}

    {{/* Fallback a castellano si no existe traducciÃ³n */}}
    {{ if not $content }}
      {{ $content = index $dataFile.content "es" }}
    {{ end }}

    {{ $content | markdownify }}
    ```

    ## Resultados

    El sitio ahora sirve **automÃ¡ticamente** contenido en castellano, 
    inglÃ©s y portuguÃ©s desde una sola base de cÃ³digo. Los lectores pueden 
    acceder a los artÃ­culos en su idioma preferido, pero yo tengo que mantener
    un conjunto de archivos.

    ## git hooks

    Como la ventaja principal de esto es que publicar un post es muy aerodinÃ¡mico
    (nuevo archivo, escribir, git add, git commit, git push) hacer las traducciones
    es de todos una fricciÃ³n adicional e importante. Por eso voy a implementar un
    script que use la API de alguna IA para hacer las traducciones, ya veremos.

    **URLs del sitio:**
    - ðŸ‡¦ðŸ‡· [lu2dfm.github.io/es/](https://lu2dfm.github.io/es/)
    - ðŸ‡§ðŸ‡· [lu2dfm.github.io/pt-br/](https://lu2dfm.github.io/pt-br/)
    - ðŸ‡ºðŸ‡¸ [lu2dfm.github.io/en/](https://lu2dfm.github.io/en/) 

    El sistema funciona transparentemente para el usuario final, pero simplifica
    enormemente el trabajo de mantenimiento.


